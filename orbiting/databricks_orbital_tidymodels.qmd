---
title: Databricks + Tididymodels + Orbital
subtitle: Simple use case example
author: Edgar Ruiz - Posit
date: 2025-05-22
format: html
editor: visual
execute:
  eval: true
toc: true  
toc-expand: true
---

```{r}
#| include: false
library(tidymodels)
library(tidyverse)
library(dbplyr)
options("odbc.no_config_override"=FALSE)
```



## Download sample

```{r}
library(DBI)

con <- dbConnect(
  drv = odbc::databricks(), 
  httpPath = "/sql/1.0/warehouses/b71952ebceb705ce"
  )
```


```{r}
schema <- "end-to-end"
catalog <- "sol_eng_demo_nickp"
table <- "loans_full_schema"
```


```{r}
library(glue)

sample_sql <- glue_sql(
  "SELECT * ", 
  "FROM ",
  "{`catalog`}.{`schema`}.{`table`}",
  "TABLESAMPLE (100 ROWS) REPEATABLE (999)",
  .con = con
  )

sample_sql
```


```{r}
sample_lending <- dbGetQuery(
  conn = con, 
  statement = sample_sql
  )
```



## Fit locally

```{r}
set.seed(999)
library(tidymodels)

sample_lending <- sample_lending |> 
  mutate(
    total_credit_lines = as.double(total_credit_lines),
    loan_amount = as.double(loan_amount),
    term = as.double(term)
    )

split_lending <- initial_split(sample_lending)

lending_training <- training(split_lending)

train_lend <- lending_training[, c("annual_income", "total_credit_lines", "loan_amount",  "term", "interest_rate")]
rec_lending <- recipe(
  interest_rate ~ annual_income + total_credit_lines + loan_amount + term, 
  data = lending_training
  ) |> 
  step_normalize(all_numeric_predictors())


lm_spec <- linear_reg()

wf_spec <- workflow(rec_lending, lm_spec)

wf_fit <- fit(wf_spec, lending_training)

wf_fit
```




## Convert to SQL using Orbital

```{r}
library(orbital)

lending_orbital <-  orbital(wf_fit, prefix = "pred")

lending_orbital
```
## Build report 

```{r}
library(dplyr)
library(dbplyr)

tbl_lending <- tbl(con, I(glue("{catalog}.`{schema}`.{table}")))

tbl_lending
```



```{r}
tbl_prep <- tbl_lending |> 
  mutate(o_annual_income = annual_income, 
         o_total_credit_lines = total_credit_lines,
         o_loan_amount = loan_amount, 
         o_term = term
         ) |> 
  mutate(!!! orbital_inline(lending_orbital)) |> 
  select(
    pred, interest_rate, emp_title, balance, application_type,
    o_annual_income, o_total_credit_lines, o_loan_amount, o_term
  ) 

tbl_prep |> 
  head()
```

```{r}
tbl_final <- tbl_prep |> 
  filter(interest_rate - pred > 15)
```

```{r}
tbl_final
```


```{r}
tbl_final |> 
  show_query()
```

```{r}
final_sql <- remote_query(tbl_final)

final_sql
```

```{r}
dbGetQuery(con, final_sql)
```

