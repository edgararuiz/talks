---
title: "Databricks and pins"
subtitle: "Sample and train"
format: html
---

## Load data

```{r}
#| include: false
library(tidymodels)
library(tidyverse)
library(sparklyr)
```

```{r}
library(sparklyr)

sc <- spark_connect(method = "databricks_connect")
```

```{r}
library(tidyverse)

tbl_lending <- tbl(sc, I("sol_eng_demo_nickp.`end-to-end`.loans_full_schema"))

tbl_lending
```

```{r}
local_lending <- tbl_lending |> 
  sample_n(1000) |> 
  collect()

local_lending
```

```{r}
library(tidymodels)

set.seed(1234)

clean_lending <- local_lending |> 
  select(
    interest_rate, paid_total, 
    paid_interest, paid_late_fees, annual_income,
    accounts_opened_24m, num_satisfactory_accounts,
    current_accounts_delinq, current_installment_accounts
    ) 

train_test_split <- initial_split(clean_lending)
lend_train <- training(train_test_split)
lend_test <- testing(train_test_split)

red_rec_obj <- recipe(interest_rate ~ ., data = lend_train) |>
  step_zv(all_predictors()) |>   
  step_filter_missing(all_numeric_predictors()) |> 
  step_normalize(all_numeric_predictors()) |>
  step_impute_mean(all_numeric_predictors())

lend_linear <- linear_reg()

lend_linear_wflow <- workflow() |>
  add_model(lend_linear) |>
  add_recipe(red_rec_obj)

lend_linear_fit <- lend_linear_wflow |>
  fit(data = lend_train)

lend_linear_fit

```

```{r}
preds <- predict(lend_linear_fit, lend_test) 

preds |> 
  ggplot() +
  geom_histogram(aes(.pred))
  
```

```{r}
library(pins)
board <- board_databricks("/Volumes/sol_eng_demo_nickp/end-to-end/r-models")
pin_write(board, lend_linear_fit, "lending-model-linear")
```

```{r}
meta <- pin_meta(board, "lending-model-linear")

url_pin <- paste(board$folder_url, "lending-model-linear", meta$local$version, meta$file, sep = "/")

url_pin
```

This function is what Spark will run in parallel for each partition. Known as User Defied Function, or UDF, Spark lets us run R code inside the Spark session. We use that to read the model, and run data transformation on the data

```{r}
lending_predict <- function(local_lending) {
  library(tidymodels)
  library(tidyverse)
  library(pins)
  url_pin <- "/Volumes/sol_eng_demo_nickp/end-to-end/r-models/lending-model-linear/20250421T150450Z-321f3/lending-model-linear.rds"
  if(file.exists(url_pin)) {
    model <- readRDS(url_pin)  
  } else {
    board <- board_databricks("/Volumes/sol_eng_demo_nickp/end-to-end/r-models")
    model <- pin_read(board, "lending-model-linear")
  }
  preds <- predict(model, local_lending)
  local_lending |> 
    bind_cols(preds) |> 
    select(56, interest_rate, everything())
}
```

```{r}
lending_predict(local_lending) 
```

```{r}
tbl_result <- tbl_lending |> 
  head(100) |> 
  spark_apply(lending_predict) |> 
  collect()
```

```{r}
columns <- "_pred double, interest_rate double, emp_title string, emp_length string, state string, homeownership string, annual_income double, verified_income string, debt_to_income string, annual_income_joint string, verification_income_joint string, debt_to_income_joint string, delinq_2y double, months_since_last_delinq string, earliest_credit_line double, inquiries_last_12m double, total_credit_lines double, open_credit_lines double, total_credit_limit double, total_credit_utilized double, num_collections_last_12m double, num_historical_failed_to_pay double, months_since_90d_late string, current_accounts_delinq double, total_collection_amount_ever double, current_installment_accounts double, accounts_opened_24m double, months_since_last_credit_inquiry string, num_satisfactory_accounts double, num_accounts_120d_past_due string, num_accounts_30d_past_due double, num_active_debit_accounts double, total_debit_limit double, num_total_cc_accounts double, num_open_cc_accounts double, num_cc_carrying_balance double, num_mort_accounts double, account_never_delinq_percent double, tax_liens double, public_record_bankrupt double, loan_purpose string, application_type string, loan_amount double, term double, installment double, grade string, sub_grade string, issue_month string, loan_status string, initial_listing_status string, disbursement_method string, balance double, paid_total double, paid_principal double, paid_interest double, paid_late_fees double"
```

```{r}
tbl_result |> 
  filter(`_pred` - interest_rate  > 5)
```


```{r}
with_preds <- tbl_lending |> 
  spark_apply(lending_predict, columns = columns) |> 
  mutate(diff = interest_rate - `_pred`) |> 
  compute()
```

```{r}
sd_diff <- with_preds |> 
  summarise(x = sd(diff, na.rm = TRUE)) |> 
  pull()

sd_diff
```

```{r}
with_preds |> 
  filter(diff > sd_diff)
```






