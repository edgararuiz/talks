---
format: 
  revealjs:
    width: 1600
    height: 920
    max-scale: 1
    min-scale: 1
    smaller: true
    transition: fade
    background-transition: fade
    theme: theme.scss
    code-line-numbers: false
    menu: true
    code-block-height: 640px
engine: knitr
---

# {background-image="assets/background/title-slide-dark.svg" background-size="1700px" background-color="#3D6E74"}

::: {.content-slide-thin}
[Welcome to]{style="font-size: 80px;"}
:::

::: {.content-slide}
[**Easing the pain <br/> of connecting <br/> to databases**]{style="font-size:135px; color: #eee;"}
:::


:::{.colums}
:::{.column width="3%"}
:::
:::{.column width="80%"}
:::{.content-slide-thin}
[
Edgar Ruiz<br/>
_ edgararuiz
]{style="font-size:60px;"}
:::
:::
:::

![](assets/linkedin.png){.absolute top="653" left="43" width="45"}
![](assets/qr-code){.absolute top="405" left="1279" width="345"}

## {background-image="assets/background/boxed-light.svg" background-size="1700px" background-color="white" auto-animate=true}

:::{.subject-slide}
[Improvements to]{.absolute top="300" left="150"}
:::

![](assets/hexes/odbc.png){.absolute top="215" left="1120" width="300"}

## {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white" auto-animate=true}


![](assets/hexes/odbc.png){.absolute top="0" left="1470" width="120"}

[Before...]{style="color:#666; font-size:2.4em; font-weight:600; line-height:0.9;"}

:::{.custom2}
You needed [10]{style="font-size:75px;"} arguments to connect to **Databricks**
:::

:::{.colums}
:::{.column width="16%"}
:::
:::{.column width="67%"}
:::{.code-slim-35}

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|2|3|4|5|6|7|8|9|10|11|12|"

con <- dbConnect(
  odbc::odbc(),
  Driver = ".../lib/libsparkodbc_sb64-universal.dylib",
  Host = Sys.getenv("DATABRICKS_HOST"),
  PWD = Sys.getenv("DATABRICKS_TOKEN"),
  HTTPPath = "/sql/1.0/warehouses/300bd24ba12adf8e",
  Port = 443,
  AuthMech = 3,
  Protocol = "https",
  ThriftTransport = 2,
  SSL = 1,
  UID = "token"
)
```

:::
:::
:::

## [Now...]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

<br/>

:::{.custom2}
`databricks()` uses sensible defaults for you 🎉 <br/> You just need your `httpPath`
:::

<br/>

:::{.colums}
:::{.column width="16%"}
:::
:::{.column width="67%"}

:::{.code-slim-45}

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|2|3|"

con <- dbConnect(
  odbc::databricks(),
  httpPath = "/sql/1.0/warehouses/300bd24ba12adf8e"
  )
```
:::

:::
:::

![](assets/hexes/odbc.png){.absolute top="0" left="1470" width="120"}

## [What `databricks()` does]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.custom2}
:::{.incremental1}
- 🚗 Searches for **driver** in default areas (Linux, Mac)
- 🔑 Determines **authentication** method (*PAT, M2M, CLI, Posit Workbench*),
sets correct defaults
- 🪪 Passes your credentials
- ✅ Defaults for `ThriftTransport`, `Protocol`, `SSL`, and `Port`
- 🕺 Any argument can be overriden by user
:::
:::

![](assets/hexes/odbc.png){.absolute top="0" left="1470" width="120"}


## [Issue in with Mac ODBC driver]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.columns}
:::{.column width="10%"}
[❌]{style="font-size:100px;"}
:::
:::{.column width="82%"}
:::{.code-slim-35 }
```python
Unable to locate SQLGetPrivateProfileString function: [Simba][Support] (50483) 
Could not load shared library, all attempted paths ("") failed
```
:::
:::
:::{.column width="8%"}
[❌]{style="font-size:100px;"}
:::
:::

:::{.incremental1}
1. Search for a file called libodbcinst.dylib in the '/usr/local/lib/' folder.
2. If not found, install it via Homebrew in the terminal: **brew install unixodbc**
3. Use: **brew --prefix unixodbc** to find out where Homebrew installed it. 
The libodbcinst.dylib file should be inside the 'lib' sub-folder.
4. Open: **'/Library/simba/spark/lib/simba.sparkodbc.ini'.**
5. Append the following two lines at the end: **ODBCInstLib=[Location of your 
libodbcinst.dylib file]**, **DriverManagerEncoding=UTF-16**
:::  
  
## [`databricks()` does that for you!]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.columns}
:::{.column width="8%"}
[✅]{style="font-size:100px;"}
:::
:::{.column width="78%"}
:::{.code-slim-35 }
```r

con <- dbConnect(odbc::databricks(), httpPath = "[SQL Service path]")
```
:::
:::
:::{.column width="8%"}
[✅]{style="font-size:100px;"}
:::
:::


1. ~~Search for a file called libodbcinst.dylib in the '/usr/local/lib/' folder.~~
2. ~~If not found, install it via Homebrew in the terminal: **brew install unixodbc**~~
3. ~~Use: **brew --prefix unixodbc** to find out where Homebrew installed it.
The libodbcinst.dylib file should be inside the 'lib' sub-folder.~~
4. ~~Open: **'/Library/simba/spark/lib/simba.sparkodbc.ini'.**~~
5. ~~Append the following two lines at the end: **ODBCInstLib=[Location of your 
libodbcinst.dylib file]**, **DriverManagerEncoding=UTF-16**~~

![](assets/hexes/odbc.png){.absolute top="0" left="1470" width="120"}

## [Same functionality for Snowflake 🎉]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}


:::{.custom2}
[`odbc` v1.5.0 introduced the `snowflake()` function]{style="line-height:1.5;"}
:::


:::{.columns}
:::{.column width="55%"}
:::{.custom2}
Before
:::
:::{.code-slim-35}
```r
con <- dbConnect(odbc::odbc(),
  Account = "testorg-test_account",
  Driver = ".../bin/lib/libsnowflakeodbc_sb64.so",
  Server = "[your server's path]",
  UID = "[your user]",
  PWD   = "[your password]",
  )
```
:::
:::
:::{.column width="45%"}
:::{.custom2}
Now!
:::

:::{.code-slim-35}
```r
# Using ambient credentials 

con <- dbConnect(
  odbc::snowflake()
)
```
:::


:::
:::

![](assets/hexes/odbc.png){.absolute top="0" left="1470" width="120"}

## [Flexible ways to authenticate️]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.columns}
:::{.column width="47%"}

[
**Use browser-based SSO** - Currently in the development version. Only for desktops
]{style="font-size:55px;"}

:::
:::{.column width="45%"}
:::{.code-slim-35}
```r
con <- dbConnect(
  odbc::snowflake(),
  account = "testorg-test_account",
  authenticator = "externalbrowser"
)
```
:::
:::
:::{.column width="8%"}
:::
:::

<br/>

:::{.columns}
:::{.column width="47%"}
[Use a traditional username & password]{style="font-size:55px;"}
:::
:::{.column width="45%"}
:::{.code-slim-35}
```r
con <- dbConnect(
  odbc::snowflake(),
  account = "testorg-test_account",
  uid = "me",
  pwd = rstudioapi::askForPassword()
)
```
:::
:::
:::{.column width="8%"}
:::
:::

![](assets/hexes/odbc.png){.absolute top="0" left="1470" width="120"}

## [What `snowflake()` does]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

<br/>

:::{.custom2}
:::{.incremental1}
- 🚗 Searches for **driver** in default areas (Linux, Mac)
- 🔑 Determines **authentication** method, sets correct defaults
- 🪪 Passes your credentials
- 🕺 Any argument can be overriden by user
:::
:::

![](assets/hexes/odbc.png){.absolute top="0" left="1470" width="120"}


## {background-image="assets/background/boxed-light.svg" background-size="1700px" background-color="white" auto-animate=true}

:::{.subject-slide}
[DB Connection in ]{.absolute top="300" left="150"}
:::

![](assets/positron.png){.absolute top="215" left="1120" width="300"}

## [Connections Pane in RStudio]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.columns}
:::{.column width="50%"}
:::{.custom2}
:::{.incremental1}
- The beloved Connections Pane in RStudio introduced in v1.0
- Let's us navigate the multiple levels of the DB structure
- Preview field names and types
:::
:::
:::
:::{.column width="50%"}
:::
:::

![](assets/rstudio-connections.png){.absolute top="100" left="900" width="650"}

## [Connections Pane in ~~RStudio~~ Positron!]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.columns}
:::{.column width="50%"}
:::{.custom2}
:::{.incremental1}
- Introduced in the public beta
- Let's us navigate the multiple levels of the DB structure
- Preview field names and types
- Nice integrated look 
:::
:::
:::
:::{.column width="50%"}
:::
:::

![](assets/positron-connections.png){.absolute top="100" left="900" width="650"}

## {background-image="assets/background/thank-you.svg" background-size="1700px" background-color="#2a7070"}


![](assets/racoon.jpg){.absolute top=100 left=270 width=380}

![](assets/qr-code.png){.absolute top=280 left=1150 width=430}


